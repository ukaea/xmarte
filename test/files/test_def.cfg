+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "ERROR"
            Timeout = 0
            +PrepareChangeToState1Msg = {
                Class = Message
                Destination = "App"
                Function = "PrepareNextState"
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State1"
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = "App"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
    +STATE1 = {
        Class = ReferenceContainer
        +ERROR = {
            Class = StateMachineEvent
            NextState = "ERROR"
            NextStateError = "ERROR"
            Timeout = 0
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = "App"
                Function = "StopCurrentStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
            +PrepareChangeToErrorMsg = {
                Class = Message
                Destination = "App"
                Function = "PrepareNextState"
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "Error"
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = "App"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
        +RESET = {
            Class = StateMachineEvent
            NextState = "STATE1"
            NextStateError = "STATE1"
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = "App"
                Function = "StopCurrentStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
            +PrepareChangeToState1Msg = {
                Class = Message
                Destination = "App"
                Function = "PrepareNextState"
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State1"
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = "App"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
}
$App = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +State1ConstantLog = {
            Class = ConstantGAM
            OutputSignals = {
                state = {
                    Type = uint32
                    Default = 0
                    DataSource = DDB0
                }
            }
        }
        +TimerHandler = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = Timer
                    Type = uint32
                    Frequency = 500
                }
            }
            OutputSignals = {
                DTime = {
                    DataSource = DDB0
                    Alias = DTime
                    Type = uint32
                }
            }
        }
        +Constants = {
            Class = ConstantGAM
            OutputSignals = {
                newsignal = {
                    DataSource = DDB0
                    Type = uint32
                    Alias = newsignal
                    Default = 0
                }
                newsignal1 = {
                    DataSource = DDB0
                    Type = uint32
                    Alias = newsignal1
                    Default = 0
                }
                newsignal2 = {
                    DataSource = DDB0
                    Type = uint32
                    Alias = newsignal2
                    Default = 0
                }
            }
        }
        +State1-Thread1-end = {
            Class = EndGAM
            MaxCycles = 500
            InputSignals = {
                state = {
                    DataSource = DDB0
                    Type = uint32
                }
            }
        }
        +LoggingGAM = {
            Class = IOGAM
            InputSignals = {
                state = {
                    Type = uint32
                    DataSource = DDB0
                    Alias = state
                }
                DTime = {
                    DataSource = DDB0
                    Alias = DTime
                    Type = uint32
                }
                newsignal = {
                    DataSource = DDB0
                    Type = uint32
                    Alias = newsignal
                }
                newsignal1 = {
                    DataSource = DDB0
                    Type = uint32
                    Alias = newsignal1
                }
                newsignal2 = {
                    DataSource = DDB0
                    Type = uint32
                    Alias = newsignal2
                }
            }
            OutputSignals = {
                state = {
                    Type = uint32
                    DataSource = LogGAMSource
                }
                DTime = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
                newsignal = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
                newsignal1 = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
                newsignal2 = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
            }
        }
        +ToLogGAM = {
            Class = IOGAM
            InputSignals = {
                state = {
                    Type = uint32
                    DataSource = LogGAMSource
                }
                DTime = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
                newsignal = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
                newsignal1 = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
                newsignal2 = {
                    DataSource = LogGAMSource
                    Type = uint32
                }
            }
            OutputSignals = {
                state = {
                    Type = uint32
                    DataSource = LoggingFileWriter
                }
                DTime = {
                    DataSource = LoggingFileWriter
                    Type = uint32
                }
                newsignal = {
                    DataSource = LoggingFileWriter
                    Type = uint32
                }
                newsignal1 = {
                    DataSource = LoggingFileWriter
                    Type = uint32
                }
                newsignal2 = {
                    DataSource = LoggingFileWriter
                    Type = uint32
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB0
        +TimingsDataSource = {
            Class = TimingDataSource
        }
        +DDB0 = {
            Class = GAMDataSource
        }
        +LogGAMSource = {
            Class = GAMDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Busy"
            ExecutionMode = "RealTimeThread"
            CPUMask = 0xc
            Phase = 0
            SleepPercentage = 0
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                    Frequency = 500
                }
                AbsoluteTime = {
                    Type = uint64
                }
                DeltaTime = {
                    Type = uint64
                }
                TrigRephase = {
                    Type = uint8
                }
            }
        }
        +LoggingFileWriter = {
            Class = RFileDataSource::FileWriter
            NumberOfBuffers = 100000
            CPUMask = 0xffffffff
            StackSize = 100000000
            Filename = "output.csv"
            Overwrite = "yes"
            FileFormat = "csv"
            CSVSeparator = ","
            StoreOnTrigger = 0
            RefreshContent = 0
            NumberOfPreTriggers = 0
            NumberOfPostTriggers = 0
            Signals = {
                state = {
                    Type = uint32
                }
                DTime = {
                    Type = uint32
                }
                newsignal = {
                    Type = uint32
                }
                newsignal1 = {
                    Type = uint32
                }
                newsignal2 = {
                    Type = uint32
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0xFFFFFFFF
                    Functions = { State1ConstantLog TimerHandler Constants State1-Thread1-end LoggingGAM ToLogGAM }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = TimingsDataSource
        MaxCycles = 0
    }
}
