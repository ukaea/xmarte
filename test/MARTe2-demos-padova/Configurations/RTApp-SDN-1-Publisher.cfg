+WebRoot = {
    Class = HttpObjectBrowser
    Root = "."
    +ObjectBrowse = {
        Class = HttpObjectBrowser
        Root = "/"
    }
    +ResourcesHtml = {
        Class = HttpDirectoryResource
        BaseDir = "../../MARTe2-dev/Resources/HTTP/"
    }    
    +HttpMessageInterface = {
        Class = HttpMessageInterface
        +GOTOIDLE = {
            Class = Message
            Destination = StateMachine
            Function = GOTOIDLE
            Mode = ExpectsReply
        }
        +GOTOERR = {
            Class = Message
            Destination = StateMachineError
            Function = GOTOERR 
            Mode = ExpectsReply
        }
    }
}
+WebServer = {
    Class = HttpService
    Port = 8085
    WebRoot = WebRoot
    Timeout = 0
    ListenMaxConnections = 255
    AcceptTimeout = 1000
    MaxNumberOfThreads = 8
    MinNumberOfThreads = 1
}
+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer      
        +START = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0
            +ChangeToStateIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +IDLE = {
        Class = ReferenceContainer
        +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +ENTER = {
            Class = ReferenceContainer
            +ChangeToErrorMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Error
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
            +GOTOIDLE = {
            Class = StateMachineEvent
            NextState = "IDLE"
            NextStateError = "ERROR"
            Timeout = 0 
            +ChangeToIdleMsg = {
                Class = Message
                Destination = TestApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Idle
                }
            }
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = TestApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }

    }
}
$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +GAMTimer = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 200
                    DataSource = Timer
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {                  
                    DataSource = Timings
                    Alias = "Idle.Thread1_CycleTime"
                    Type = uint32           
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }                
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Idle_Thread1_CycleTime = {
                    DataSource = DDB1
                    Type = uint32           
                }
            }
        }
        +GAMRef0 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 1.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMRef1 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 3.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference1 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMRef2 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 7.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference2 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMRef3 = {
            Class = WaveformGAM::WaveformSin
            Amplitude = 1.0
            Frequency = 10.0
            Phase = 0.0
            Offset = 0.0
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32 
                }
            }
            OutputSignals = {
                Reference3 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
        }
        +GAMSDNPublisher = {
            Class = IOGAM
            InputSignals = {
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
                Reference0 = {
                    DataSource = DDB1
                    Type = float64
                }
                Reference1 = {
                    DataSource = DDB1
                    Type = float64
                }
                Reference2 = {
                    DataSource = DDB1
                    Type = float64
                }
                Reference3 = {
                    DataSource = DDB1
                    Type = float64
                }
            }
            OutputSignals = {
                Time = {
                    DataSource = SDNPub
                    Type = uint32
                }
                Reference0 = {
                    DataSource = SDNPub
                    Type = float64
                }
                Reference1 = {
                    DataSource = SDNPub
                    Type = float64
                }
                Reference2 = {
                    DataSource = SDNPub
                    Type = float64
                }
                Reference3 = {
                    DataSource = SDNPub
                    Type = float64
                    Trigger = 1
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
        }        
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            ExecutionMode = RealTimeThread
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }        
        +SDNPub= {
            Class = SDN::SDNPublisher            
            Interface = lo
            Topic = MARTe2DemoAppReferences
            Signals = {
            	Locked = 1
                Time = {
                    Type = uint32
                }
                Reference0 = {
                    Type = float64
                }
                Reference1 = {
                    Type = float64
                }
                Reference2 = {
                    Type = float64
                }
                Reference3 = {
                    Type = float64
                }
            }
        }
    }
    +States = {
        Class = ReferenceContainer
        +Idle = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMTimer GAMRef0 GAMRef1 GAMRef2 GAMRef3 GAMSDNPublisher }
                }
            }
        }
        +Error = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x2
                    Functions = {GAMTimer }
                }
            }
        }

    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
